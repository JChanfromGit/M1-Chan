/*
Deployment script for M1-Partial-DB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "M1-Partial-DB"
:setvar DefaultFilePrefix "M1-Partial-DB"
:setvar DefaultDataPath "C:\Users\James Chan\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\James Chan\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[Customer_Item]...';


GO
CREATE TABLE [dbo].[Customer_Item] (
    [Id]          INT             IDENTITY (1, 1) NOT NULL,
    [ItemId]      INT             NOT NULL,
    [ItemCode]    NVARCHAR (20)   NOT NULL,
    [ItemName]    NVARCHAR (30)   NOT NULL,
    [ItemBrand]   NVARCHAR (20)   NOT NULL,
    [UnitPrice]   DECIMAL (18, 2) NULL,
    [ItemSize]    NVARCHAR (15)   NULL,
    [ItemType]    NVARCHAR (20)   NULL,
    [ItemVariant] NVARCHAR (20)   NULL,
    [ItemRemarks] NVARCHAR (50)   NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Customer_Preview]...';


GO
CREATE TABLE [dbo].[Customer_Preview] (
    [Id]           INT           IDENTITY (1, 1) NOT NULL,
    [UserName]     NVARCHAR (20) NOT NULL,
    [FirstName]    NVARCHAR (30) NOT NULL,
    [LastName]     NVARCHAR (25) NOT NULL,
    [Nickname]     NVARCHAR (15) NOT NULL,
    [EmailAddress] NVARCHAR (25) NOT NULL,
    [Password]     NVARCHAR (30) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Customer_Item]...';


GO
ALTER TABLE [dbo].[Customer_Item]
    ADD CONSTRAINT [FK_Customer_Item] FOREIGN KEY ([ItemId]) REFERENCES [dbo].[Customer_Preview] ([Id]);


GO
PRINT N'Creating Procedure [dbo].[_CustomerItems_Value]...';


GO
CREATE PROCEDURE [dbo].[_CustomerItems_Value]
AS
	insert into dbo.Customer_Item (ItemId, ItemCode, ItemName, ItemBrand, UnitPrice, ItemSize, ItemType, ItemVariant, ItemRemarks) values (1, '04011-6789', 'Cookies and Cream', 'Selecta', 289.99, null, null, null, null);
	insert into dbo.Customer_Item (ItemId, ItemCode, ItemName, ItemBrand, UnitPrice, ItemSize, ItemType, ItemVariant, ItemRemarks) values (2, '03138-0689', 'Coffee Crumble', 'Selecta', 299.99, null, null, null, null);
	insert into dbo.Customer_Item (ItemId, ItemCode, ItemName, ItemBrand, UnitPrice, ItemSize, ItemType, ItemVariant, ItemRemarks) values (3, '54868-0106', 'Double Dutch', 'Selecta', 310.99, null, null, null, null);
	insert into dbo.Customer_Item (ItemId, ItemCode, ItemName, ItemBrand, UnitPrice, ItemSize, ItemType, ItemVariant, ItemRemarks) values (4, '20282-5433', 'Magnum Ice Cream Bar', 'Selecta', 80.00, null, null, null, null);
	insert into dbo.Customer_Item (ItemId, ItemCode, ItemName, ItemBrand, UnitPrice, ItemSize, ItemType, ItemVariant, ItemRemarks) values (5, '95292-7211', 'Macapuno Caramel', 'Magnolia', 295.00, null, null, null, null);
	insert into dbo.Customer_Item (ItemId, ItemCode, ItemName, ItemBrand, UnitPrice, ItemSize, ItemType, ItemVariant, ItemRemarks) values (6, '19723-0994', 'Tablea Yema', 'Magnolia', 300.00, null, null, null, null);
	insert into dbo.Customer_Item (ItemId, ItemCode, ItemName, ItemBrand, UnitPrice, ItemSize, ItemType, ItemVariant, ItemRemarks) values (7, '54200-1678', 'Orea Ice Cream', 'Nestle', 265.99, null, null, null, null);
	insert into dbo.Customer_Item (ItemId, ItemCode, ItemName, ItemBrand, UnitPrice, ItemSize, ItemType, ItemVariant, ItemRemarks) values (8, '06503-1532', 'Almond Brownie Fudge', 'Nestle', 285.99, null, null, null, null);
	insert into dbo.Customer_Item (ItemId, ItemCode, ItemName, ItemBrand, UnitPrice, ItemSize, ItemType, ItemVariant, ItemRemarks) values (9, '15043-3022', 'Mint Chocolate Chip', 'Big Scoop', 150.00, null, null, null, null);
	insert into dbo.Customer_Item (ItemId, ItemCode, ItemName, ItemBrand, UnitPrice, ItemSize, ItemType, ItemVariant, ItemRemarks) values (10, '14901-0961', '2 in 1 Avocado Strawberry', 'Aice', 120.00, null, null, null, null);
RETURN 0
GO
PRINT N'Creating Procedure [dbo].[spAdd_Item]...';


GO
CREATE PROCEDURE [dbo].[spAdd_Item] 
    @itemCode NVARCHAR(20), 
    @itemName NVARCHAR(50), 
    @itemBrand NVARCHAR(30),  
    @unitPrice DECIMAL(18, 2)
AS
BEGIN
	SET NOCOUNT ON;

	INSERT INTO dbo.Customer_Item (ItemCode, ItemName, ItemBrand, UnitPrice)
	VALUES (@itemCode, @itemName, @itemBrand, @unitPrice);
END
GO
PRINT N'Creating Procedure [dbo].[spCustomer_Login]...';


GO
CREATE PROCEDURE [dbo].[spCustomer_Login]
	@username nvarchar(20),
	@password nvarchar(30)
AS
begin

	set nocount on;
	SELECT [Id], [UserName], [Password]
	FROM dbo.Customer_Preview
	WHERE UserName = @username
	AND Password = @password;

end
RETURN 0
GO
PRINT N'Creating Procedure [dbo].[spCustomer_Registration]...';


GO
CREATE PROCEDURE [dbo].[spCustomer_Registration]
	@userName nvarchar(20),
	@firstName nvarchar(30),
	@lastName nvarchar(25),
	@nickname nvarchar(15),
	@emailaddress nvarchar(25),
	@password nvarchar(30)
AS
begin
	set nocount on;
	INSERT INTO dbo.Customer_Preview
		(UserName, FirstName, LastName, Nickname, EmailAddress, Password)
		VALUES (@userName, @firstName, @lastName, @nickname, @emailaddress, @password)
end
RETURN 0
GO
PRINT N'Creating Procedure [dbo].[spDelete_Item]...';


GO
CREATE PROCEDURE [dbo].[spDelete_Item]
	@itemId int
AS
BEGIN
	SET NOCOUNT ON;

	DELETE FROM dbo.Customer_Item
	WHERE Id = @itemId;
END
GO
PRINT N'Creating Procedure [dbo].[spUpdate_Item]...';


GO
CREATE PROCEDURE [dbo].[spUpdate_Item]
	@itemId int,
	@itemCode nvarchar(20),
	@itemName nvarchar(30),
	@itemBrand nvarchar(20),
	@unitPrice decimal(18, 2)
AS
BEGIN
	SET NOCOUNT ON;

	UPDATE dbo.Customer_Item
	SET 
		ItemCode = @itemCode, 
		ItemName = @itemName,
		ItemBrand = @itemBrand,
		UnitPrice = @unitPrice
	WHERE Id = @itemId;
END
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ea63b2cb-7560-40e4-95a8-d26968f40ee4')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ea63b2cb-7560-40e4-95a8-d26968f40ee4')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b9ecd290-1f50-4f3e-98ba-02e394c6feb2')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b9ecd290-1f50-4f3e-98ba-02e394c6feb2')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '45c55c3d-9b29-467e-b2ba-404b4224e872')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('45c55c3d-9b29-467e-b2ba-404b4224e872')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd6fff80a-2606-465e-8416-25b66217e6a2')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d6fff80a-2606-465e-8416-25b66217e6a2')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '98dcb96c-9073-4552-9ca0-ad31e7d56fd0')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('98dcb96c-9073-4552-9ca0-ad31e7d56fd0')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'da1f0e28-698d-42b6-838d-8d69ee8a50d3')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('da1f0e28-698d-42b6-838d-8d69ee8a50d3')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '8561901d-e555-4270-84d3-efc9895301a3')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('8561901d-e555-4270-84d3-efc9895301a3')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '53bd1ae9-9a0b-476d-ad5a-93c3aa39c513')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('53bd1ae9-9a0b-476d-ad5a-93c3aa39c513')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '0a82f40c-0c5d-4a7d-a5bc-772df466d420')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('0a82f40c-0c5d-4a7d-a5bc-772df466d420')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '73c7d90f-f11d-4caa-9823-2b11695cea44')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('73c7d90f-f11d-4caa-9823-2b11695cea44')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b685c830-c4ab-4d06-b9d7-fb391b5e874c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b685c830-c4ab-4d06-b9d7-fb391b5e874c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '4b7be653-f711-4e2a-81c5-0b74f6b45a10')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('4b7be653-f711-4e2a-81c5-0b74f6b45a10')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'f5e52912-67ef-45e1-a1ca-cf3cfbfd78b0')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('f5e52912-67ef-45e1-a1ca-cf3cfbfd78b0')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '71f7e1d9-c93e-4f38-91a8-b326f391a3a0')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('71f7e1d9-c93e-4f38-91a8-b326f391a3a0')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '238e1a3a-b7b3-49dc-b90a-11eb854eb783')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('238e1a3a-b7b3-49dc-b90a-11eb854eb783')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '5a7c507e-3a37-43ab-a974-4a3ccea5a79f')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('5a7c507e-3a37-43ab-a974-4a3ccea5a79f')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '20fb5195-b36e-453f-97e7-7c8d554d205b')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('20fb5195-b36e-453f-97e7-7c8d554d205b')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '9deec8a8-0ecb-44ff-8f82-5fa30a58f8f1')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('9deec8a8-0ecb-44ff-8f82-5fa30a58f8f1')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '5850c5da-afd4-451e-9ac5-a0a9dfd2444b')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('5850c5da-afd4-451e-9ac5-a0a9dfd2444b')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e8f85d76-d713-458d-9aae-71a4aedacf20')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e8f85d76-d713-458d-9aae-71a4aedacf20')

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
