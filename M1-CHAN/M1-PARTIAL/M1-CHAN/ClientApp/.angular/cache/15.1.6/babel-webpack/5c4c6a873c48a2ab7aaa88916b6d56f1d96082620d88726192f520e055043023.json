{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nlet RegisterComponent = class RegisterComponent {\n  constructor(customerService, router) {\n    this.customerService = customerService;\n    this.router = router;\n    this.title = 'Registration [CUSTOMER]';\n    this.showSuccess = false;\n    this.successMessage = '';\n    this.validateControl = controlName => {\n      return this.accountForm.get(controlName).invalid && this.accountForm.get(controlName).touched;\n    };\n    this.registerUser = registerFormValue => {\n      this.showSuccess = false;\n      const formValues = {\n        ...registerFormValue\n      };\n      const user = {\n        Id: 0,\n        UserName: formValues.UserName,\n        FirstName: formValues.FirstName,\n        LastName: formValues.LastName,\n        Nickname: formValues.Nickname,\n        EmailAddress: formValues.EmailAddress,\n        Password: formValues.Password\n      };\n    };\n    this.accountForm = new FormGroup({\n      UserName: new FormControl('', [Validators.required, Validators.minLength(4)]),\n      FirstName: new FormControl('', [Validators.required, Validators.minLength(3)]),\n      LastName: new FormControl('', [Validators.required, Validators.minLength(3)]),\n      Nickname: new FormControl('', [Validators.required, Validators.minLength(3)]),\n      EmailAddress: new FormControl('', [Validators.required, Validators.email]),\n      Password: new FormControl('', [Validators.required, Validators.pattern(/(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@$!%*#?&^_-]).{8,}/)])\n    });\n  }\n  ngOnInit() {}\n};\nRegisterComponent = __decorate([Component({\n  selector: 'register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], RegisterComponent);\nexport { RegisterComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAASC,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;AAU5D,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAQ5BC,YAAoBC,eAAgC,EAAUC,MAAc;IAAxD,oBAAe,GAAfD,eAAe;IAA2B,WAAM,GAANC,MAAM;IANpE,UAAK,GAAG,yBAAyB;IAGjC,gBAAW,GAAY,KAAK;IAC5B,mBAAc,GAAW,EAAE;IAiBpB,oBAAe,GAAIC,WAAmB,IAAI;MAC/C,OAAO,IAAI,CAACC,WAAW,CAACC,GAAG,CAACF,WAAW,CAAE,CAACG,OAAO,IAAI,IAAI,CAACF,WAAW,CAACC,GAAG,CAACF,WAAW,CAAE,CAACI,OAAO;IACjG,CAAC;IAEM,iBAAY,GAAIC,iBAAsB,IAAI;MAC/C,IAAI,CAACC,WAAW,GAAG,KAAK;MACxB,MAAMC,UAAU,GAAG;QAAE,GAAGF;MAAiB,CAAE;MAC3C,MAAMG,IAAI,GAAsB;QAC9BC,EAAE,EAAE,CAAC;QACLC,QAAQ,EAAEH,UAAU,CAACG,QAAQ;QAC7BC,SAAS,EAAEJ,UAAU,CAACI,SAAS;QAC/BC,QAAQ,EAAEL,UAAU,CAACK,QAAQ;QAC7BC,QAAQ,EAAEN,UAAU,CAACM,QAAQ;QAC7BC,YAAY,EAAEP,UAAU,CAACO,YAAY;QACrCC,QAAQ,EAAER,UAAU,CAACQ;OACtB;IACH,CAAC;IA9BC,IAAI,CAACd,WAAW,GAAG,IAAIP,SAAS,CAAC;MAC/BgB,QAAQ,EAAE,IAAIjB,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACqB,QAAQ,EAAErB,UAAU,CAACsB,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MAC7EN,SAAS,EAAE,IAAIlB,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACqB,QAAQ,EAAErB,UAAU,CAACsB,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MAC9EL,QAAQ,EAAE,IAAInB,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACqB,QAAQ,EAAErB,UAAU,CAACsB,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MAC7EJ,QAAQ,EAAE,IAAIpB,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACqB,QAAQ,EAAErB,UAAU,CAACsB,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MAC7EH,YAAY,EAAE,IAAIrB,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACqB,QAAQ,EAAErB,UAAU,CAACuB,KAAK,CAAC,CAAC;MAC1EH,QAAQ,EAAE,IAAItB,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACqB,QAAQ,EAAErB,UAAU,CAACwB,OAAO,CAAC,wDAAwD,CAAC,CAAC;KAClI,CAAC;EACJ;EAEAC,QAAQ,IAER;CAoBD;AAzCYxB,iBAAiB,eAL7BJ,SAAS,CAAC;EACT6B,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,GACW3B,iBAAiB,CAyC7B;SAzCYA,iBAAiB","names":["Component","FormControl","FormGroup","Validators","RegisterComponent","constructor","customerService","router","controlName","accountForm","get","invalid","touched","registerFormValue","showSuccess","formValues","user","Id","UserName","FirstName","LastName","Nickname","EmailAddress","Password","required","minLength","email","pattern","ngOnInit","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Files\\VSC\\M1-Partial\\M1-CHAN\\M1-PARTIAL\\M1-CHAN\\ClientApp\\src\\app\\Forms\\Register\\register.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { CustomerService } from '../../services/CustomerService';\r\nimport { CustomerInterface } from '../../interfaces/CustomerInterface';\r\n\r\n@Component({\r\n  selector: 'register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.css']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n\r\n  title = 'Registration [CUSTOMER]';\r\n\r\n  accountForm: FormGroup;\r\n  showSuccess: boolean = false;\r\n  successMessage: string = '';\r\n\r\n  constructor(private customerService: CustomerService, private router: Router) {\r\n    this.accountForm = new FormGroup({\r\n      UserName: new FormControl('', [Validators.required, Validators.minLength(4)]),\r\n      FirstName: new FormControl('', [Validators.required, Validators.minLength(3)]),\r\n      LastName: new FormControl('', [Validators.required, Validators.minLength(3)]),\r\n      Nickname: new FormControl('', [Validators.required, Validators.minLength(3)]),\r\n      EmailAddress: new FormControl('', [Validators.required, Validators.email]),\r\n      Password: new FormControl('', [Validators.required, Validators.pattern(/(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@$!%*#?&^_-]).{8,}/)])\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n  public validateControl = (controlName: string) => {\r\n    return this.accountForm.get(controlName)!.invalid && this.accountForm.get(controlName)!.touched;\r\n  }\r\n\r\n  public registerUser = (registerFormValue: any) => {\r\n    this.showSuccess = false;\r\n    const formValues = { ...registerFormValue };\r\n    const user: CustomerInterface = {\r\n      Id: 0,\r\n      UserName: formValues.UserName,\r\n      FirstName: formValues.FirstName,\r\n      LastName: formValues.LastName,\r\n      Nickname: formValues.Nickname,\r\n      EmailAddress: formValues.EmailAddress,\r\n      Password: formValues.Password\r\n    };\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}